# needs to be run alone, before subnet creation
module "vpc" {
  for_each = { for vpc in var.vpc : vpc.cidr_block => vpc }
  source   = "../modules/network/"
  vpc      = each.value
  # uncomment in case you want to
  # use global variables
  # project  = var.project
  # environment = var.environment
}

# this module needs the vpc_id of the previously created vpc !!!
module "subnet" {
  for_each = { for subnet in var.subnet : subnet.tags.Name => subnet }
  source   = "../modules/network/"
  subnet   = each.value
  depends_on = [
    module.vpc
  ]
}

module "internet_gateway" {
  for_each = { for ig in var.ig : ig.tags.Name => ig }
  source   = "../modules/network/"
  ig       = each.value
  depends_on = [
    module.vpc
  ]
}

# elastic ip
module "eip" {
  for_each = { for eip in var.eip : eip.tags.Name => eip }
  source   = "../modules/network/"
  eip      = each.value
  depends_on = [
    module.vpc
  ]
}

module "nat_gateway" {
  for_each = { for ngw in var.ngw : ngw.tags.Name => ngw }
  source   = "../modules/network/"
  ngw      = each.value
  depends_on = [
    module.subnet,
    module.eip
  ]
}

# this module needs the internet/nat gateway id !!!
module "route_table" {
  for_each = { for rt in var.rt : rt.tags.Name => rt }
  source   = "../modules/network/"
  rt       = each.value
  depends_on = [
    module.vpc,
    module.internet_gateway,
    module.nat_gateway
  ]
}

# this module needs the internet gateway id !!!
module "route_table_association" {
  for_each = { for rta in var.rta : rta.subnet_id => rta }
  source   = "../modules/network/"
  rta      = each.value
  depends_on = [
    module.subnet,
    module.internet_gateway,
    module.nat_gateway,
    module.route_table
  ]
}

module "security_group" {
  for_each = { for sg in var.sg : sg.name => sg }
  source   = "../modules/network/"
  sg       = each.value
  depends_on = [
    module.vpc
  ]
}

# this module needs the security group id !!!
module "security_group_rule" {
  for_each = { for sgr in var.sgr : sgr.description => sgr }
  source   = "../modules/network/"
  sgr      = each.value
  depends_on = [
    module.security_group
  ]
}

module "iam_role" {
  for_each = { for iam_role in var.iam_role : iam_role.name => iam_role }
  source   = "../modules/iam/"
  iam_role = each.value
}

# iam_role_policy_attachment
# module "iam_rpa" {
#   for_each = { for iam_rpa in var.iam_rpa : iam_rpa.role => iam_rpa}
#   source = "../modules/iam/"
#   iam_rpa = each.value
#   depends_on = [ 
#     module.iam_role 
#   ]
# }

resource "aws_iam_role_policy_attachment" "test-attach" {
  for_each   = var.iam_rpa.policy_arn
  role       = var.iam_rpa.role
  policy_arn = each.value
  depends_on = [module.iam_role]
}

# iam_instance_profile
module "iam_i_p" {
  for_each = { for iam_i_p in var.iam_i_p : iam_i_p.name => iam_i_p }
  source   = "../modules/iam/"
  iam_i_p  = each.value
  depends_on = [
    module.iam_role
  ]
}

# if you want to assign a role to an EC2 instance,
# you need to create a "iam_instance_profile" first!!!
module "launch_template" {
  for_each        = { for launch_template in var.launch_template : launch_template.name => launch_template }
  source          = "../modules/compute/"
  launch_template = each.value
  depends_on = [
    module.security_group,
    module.iam_i_p
  ]
}

# install "stress"
# https://cloudkatha.com/how-to-install-stress-on-amazon-linux-2023/?utm_content=cmp-true
module "autoscaling_group" {
  for_each = { for asg in var.asg : asg.name => asg }
  source   = "../modules/compute/"
  asg      = each.value
  depends_on = [
    module.route_table_association,
    module.launch_template
  ]
}

# module "autoscaling_policy" {
#   for_each = { for asgplc in var.asgplc : asgplc.name => asgplc }
#   source = "../modules/compute/"
#   asgplc = each.value
#   depends_on = [ 
#     module.autoscaling_group
#   ]
# }

resource "aws_autoscaling_policy" "bat" {
  name                   = var.asgplc.name
  policy_type            = var.asgplc.policy_type        
  adjustment_type        = var.asgplc.adjustment_type         
  autoscaling_group_name = var.asgplc.autoscaling_group_name
  target_tracking_configuration {
    predefined_metric_specification {
      # Valid values are: ASGTotalCPUUtilization, ASGTotalNetworkIn,
      # ASGTotalNetworkOut, ALBTargetGroupRequestCount
      predefined_metric_type = var.asgplc.predefined_metric_type  
    }
    target_value = var.asgplc.target_value                        
  }
}




